@page "/Favorites"

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject HttpClient HttpClient
@inject IConfiguration Configuration
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Favoritos</PageTitle>

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-12">
            <h2 class="fw-bolder text-dark">Favoritos</h2>
            <p class="text-muted">Aqui você pode ver e gerenciar seus favoritos salvos.</p>
        </div>
    </div>
    <div class="col-12">
        @if (favorites == null || favorites.Count == 0)
        {
            <div class="alert alert-info">
                <em>Não há favoritos salvos...</em>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" @onclick="ToggleSelectAll" /></th>
                            <th>Lugar</th>
                            <th>Temp. (°C)</th>
                            <th>Temp. (°F)</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var favorite in PaginatedFavorites)
                        {
                            <tr>
                                <td><input type="checkbox" @bind="favorite.IsSelected" /></td>
                                <td>@(string.IsNullOrEmpty(favorite.city) ? favorite.country : favorite.city)</td>
                                <td>@favorite.temp_c °C</td>
                                <td>@favorite.temp_f °F</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="@(async () => await RemoveFavorite(favorite.id, favorite.user_id))">
                                        Remover
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between align-items-center">
                <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Anterior</button>
                <span>Pagina @(CurrentPage + 1) de @TotalPages</span>
                <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Próxima</button>
            </div>
        }
    </div>
</div>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetFavorites();
            UpdatePaginatedFavorites();
        }
    }

    public class Favorite
    {
        public Guid id { get; set; }
        public Guid user_id { get; set; }
        public string city { get; set; }
        public string country { get; set; }
        public string temp_c { get; set; }
        public string temp_f { get; set; }
        public bool IsSelected { get; set; }
    }

    private List<Favorite>? favorites;
    private List<Favorite> PaginatedFavorites = new();

    private int ItemsPerPage = 10;
    private int CurrentPage = 0;

    private int TotalPages => (int)Math.Ceiling((favorites?.Count ?? 0) / (double)ItemsPerPage);

    private bool CanGoPrevious => CurrentPage > 0;
    private bool CanGoNext => CurrentPage < TotalPages - 1;

    public async Task GetFavorites()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst("UserId")?.Value;

            var baseUrl = Configuration["Envs:BaseUrl"];
            var response = await HttpClient.GetAsync($"{baseUrl}/Favorites?userID={Guid.Parse(userIdClaim)}");

            if (response.IsSuccessStatusCode)
            {
                favorites = await response.Content.ReadFromJsonAsync<List<Favorite>>();
            }
            else
            {
                errorMessage = "Erro ao obter favoritos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }

    public async Task RemoveFavorite(Guid favoriteId, Guid userId)
    {
        try
        {
            var baseUrl = Configuration["Envs:BaseUrl"];
            var url = $"{baseUrl}/Favorites?favoriteID={favoriteId}&userID={userId}";
            var response = await HttpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var favoriteToRemove = favorites?.FirstOrDefault(f => f.id == favoriteId);
                if (favoriteToRemove != null)
                {
                    favorites?.Remove(favoriteToRemove);
                }
                ToastService.Notify(new(ToastType.Success, "Favoritos", $"{DateTime.Now}", "Favorito Removido com Sucesso!"));
            }
            else
            {
                ToastService.Notify(new(ToastType.Warning, "Favoritos", $"{DateTime.Now}", "Erro ao tentar remover, tente mais tarde!"));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }

    public async Task RemoveSelectedFavorites()
    {
        var selectedFavorites = favorites?.Where(f => f.IsSelected).ToList();
        if (selectedFavorites != null)
        {
            foreach (var favorite in selectedFavorites)
            {
                await RemoveFavorite(favorite.id, favorite.user_id);
            }
        }
    }

    private void UpdatePaginatedFavorites()
    {
        if (favorites != null)
        {
            PaginatedFavorites = favorites
                .Skip(CurrentPage * ItemsPerPage)
                .Take(ItemsPerPage)
                .ToList();

            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            CurrentPage++;
            UpdatePaginatedFavorites();
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            CurrentPage--;
            UpdatePaginatedFavorites();
        }
    }


    private void ToggleSelectAll()
    {
        var selectAll = favorites?.All(f => f.IsSelected) == false;
        if (favorites != null)
        {
            foreach (var favorite in favorites)
            {
                favorite.IsSelected = selectAll;
            }
        }
    }
}