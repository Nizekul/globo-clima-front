@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject ILogger<Login> Logger
@inject NavigationManager navigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Input" OnValidSubmit="LoginUser" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;" />
                <h3>Login</h3>
            </div>
            <div class="mb-3 text-center">
                <label>User Name</label>
                <InputText @bind-Value="Input.Email" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <label>Password</label>
                <InputText @bind-Value="Input.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }
    }

    public async Task LoginUser()
    {
        var loginData = new
        {
            Username = Input.Email,
            Password = Input.Password,
        };
        var baseUrl = Configuration["Envs:BaseUrl"];
        var response = await HttpClient.PostAsJsonAsync($"{baseUrl}/Auth", loginData);

        if (response.IsSuccessStatusCode)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Input.Email),
                new Claim(ClaimTypes.Email, Input.Email),
            };

            var indentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(indentity);

            await HttpContext.SignInAsync(principal);

            navigationManager.NavigateTo("/");

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            errorMessage = "Senha ou Usuário invalido!";
        }
        else
        {
            errorMessage = "Tente novamente mais tarde.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
