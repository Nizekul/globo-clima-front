@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using globo_clima_front.Data
@using System.Security.Claims

@inject HttpClient HttpClient
@inject ILogger<Login> Logger
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration
@rendermode InteractiveServer


<PageTitle>Cadastrar</PageTitle>

<h1>Registre-se</h1>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;" />
                <h3>Bem-vindo! Vamos criar sua nova conta!</h3>
            </div>
            <div class="mb-3 text-center">
                <label>Nome</label>
                <InputText @bind-Value="Input.Name" class="form-control" placeholder="Digite seu Nome..." />
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <label>Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" placeholder="Digite seu email..." />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <label>Senha</label>
                <InputText @bind-Value="Input.Password" class="form-control" placeholder="Digite sua senha..." type="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <label>Confirmar Senha</label>
                <InputText @bind-Value="Input.ConfirmPassword" class="form-control" placeholder="Confirme sua senha..." type="password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Cadastrar</button>
            </div>
        </EditForm>
    </div>
</div>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

@code {

    [Inject] protected ToastService ToastService { get; set; } = default!;

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public class UserModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Senha { get; set; }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        var emailStore = GetEmailStore();


        var baseUrl = Configuration["Envs:BaseUrl"];
        var url = $"{baseUrl}/Users";
        var userImputs = new UserModel
            {
                Name = Input.Name,
                Email = Input.Email,
                Senha = Input.Password,
            };

        var response = await HttpClient.PostAsJsonAsync(url, userImputs);


        if (response.IsSuccessStatusCode)
        {
            ToastService.Notify(new(ToastType.Success, "Cadastrado", $"{DateTime.Now}", "Usuário cadastrado com sucesso!"));
            NavigationManager.NavigateTo("/Account/Login");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            ToastService.Notify(new(ToastType.Danger, "Cadastro", $"{DateTime.Now}", $"Erro: {error?.Message}"));
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            ToastService.Notify(new(ToastType.Danger, "Cadastro", $"{DateTime.Now}", $"Erro: {error?.Message}"));
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, "Cadastro", $"{DateTime.Now}", "Houve um erro ao fazer o cadastro, tente novamente mais tarde!"));
        }

    }

    public class ErrorResponse
    {
        public string Message { get; set; }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("É necessario um e-mail convencional, Ex: user@email.com");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Não é possível criar uma instacia do '{nameof(ApplicationUser)}'. " +
                $"Confirme se '{nameof(ApplicationUser)}' não esta com erros e verifique os parametros.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "O {0} deve ter no mínimo {2} e no máximo {1} cracteres.", MinimumLength = 3)]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "O {0} deve ter no mínimo {2} e no máximo {1} cracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirme sua senha")]
        [Compare("Password", ErrorMessage = "A senhas precisam ser a mesma, verifique e tente novamente.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
